#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>

MDNSResponder mdns;
ESP8266WebServer server(80);

const char* ssid = "BUBBLES";
const char* passphrase = "BUBBLES";
String st;
String content;

void setup() {
  Serial.begin(115200);
  EEPROM.begin(512);
  delay(10);
  Serial.println();
  Serial.println();
  Serial.println("Startup");
  // read eeprom for ssid and pass
  Serial.println("Reading EEPROM ssid");
  String esid;
  for (int i = 0; i < 32; ++i)
    {
      esid += char(EEPROM.read(i));
    }
  Serial.print("SSID: ");
  Serial.println(esid);
  Serial.println("Reading EEPROM pass");
  String epass = "";
  for (int i = 32; i < 96; ++i)
    {
      epass += char(EEPROM.read(i));
    }
  Serial.print("PASS: ");
  Serial.println(epass); 
  if ( esid.length() > 1 ) {
      // test esid
      WiFi.begin(esid.c_str(), epass.c_str());
      if (testWifi()) {
          launchWeb(0);
          return;
      }
  }
  setupAP();
}

bool testWifi(void) {
  int c = 0;
  Serial.println("Waiting for Wifi to connect"); 
  while ( c < 20 ) {
    if (WiFi.status() == WL_CONNECTED) { return true; }
    delay(500);
    Serial.print(WiFi.status());   
    c++;
  }
  Serial.println("");
  Serial.println("Connect timed out, opening AP");
  return false;
}

void launchWeb(int webtype) {
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("Local IP: ");
  Serial.println(WiFi.localIP());
  Serial.print("SoftAP IP: ");
  Serial.println(WiFi.softAPIP());
  if (!mdns.begin("esp8266", WiFi.localIP())) {
    Serial.println("Error setting up MDNS responder!");
    while(1) {
      delay(1000);
    }
  }
  Serial.println("mDNS responder started");
  createWebServer(webtype);
  // Start the server
  server.begin();
  Serial.println("Server started");
}

void setupAP(void) {
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  int n = WiFi.scanNetworks();
  Serial.println("scan done");
  if (n == 0)
    Serial.println("no networks found");
  else
  {
    Serial.print(n);
    Serial.println(" networks found");
    for (int i = 0; i < n; ++i)
     {
      // Print SSID and RSSI for each network found
      Serial.print(i + 1);
      Serial.print(": ");
      Serial.print(WiFi.SSID(i));
      Serial.print(" (");
      Serial.print(WiFi.RSSI(i));
      Serial.print(")");
      Serial.println((WiFi.encryptionType(i) == ENC_TYPE_NONE)?" ":"*");
      delay(10);
     }
  }
  Serial.println("");
  st = "<ol>";
  for (int i = 0; i < n; ++i)
    {
      // Print SSID and RSSI for each network found
      st += "<li>";
      st += WiFi.SSID(i);
      st += " (";
      st += WiFi.RSSI(i);
      st += ")";
      st += (WiFi.encryptionType(i) == ENC_TYPE_NONE)?" ":"*";
      st += "</li>";
    }
  st += "</ol>";
  delay(100);
  WiFi.softAP(ssid);
  Serial.println("softap");
  launchWeb(1);
  Serial.println("over");
}

void createWebServer(int webtype)
{
  // Check for any mDNS queries and send responses
  mdns.update();
 
  if ( webtype == 1 ) {
    server.on("/", []() {
        IPAddress ip = WiFi.softAPIP();
        String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);
        content = "<!DOCTYPE HTML>\r\n<html>Hello from ESP8266 at ";
        content += ipStr;
        content += "<p>";
        content += st;
        content += "</p><form method='get' action='setting'><label>SSID: </label><input name='ssid' length=32><input name='pass' length=64><input type='submit'></form>";
        content += "</html>";
        server.send(200, "text/html", content); 
    });
    server.on("/setting", []() {
        String qsid = server.arg("ssid");
        String qpass = server.arg("pass");
        if (qsid.length() > 0 && qpass.length() > 0) {
          Serial.println("clearing eeprom");
          for (int i = 0; i < 96; ++i) { EEPROM.write(i, 0); }
          Serial.println(qsid);
          Serial.println("");
          Serial.println(qpass);
          Serial.println("");
           
          Serial.println("writing eeprom ssid:");
          for (int i = 0; i < qsid.length(); ++i)
            {
              EEPROM.write(i, qsid[i]);
              Serial.print("Wrote: ");
              Serial.println(qsid[i]);
            }
          Serial.println("writing eeprom pass:");
          for (int i = 0; i < qpass.length(); ++i)
            {
              EEPROM.write(32+i, qpass[i]);
              Serial.print("Wrote: ");
              Serial.println(qpass[i]);
            }   
          EEPROM.commit();
          content = "<!DOCTYPE HTML>\r\n<html>";
          content += "<p>saved to eeprom... reset to boot into new wifi</p></html>";
        } else {
          content = "Error";
          Serial.println("Sending 404");
        }
        server.send(200, "text/html", content);
    });
  } else {
    server.on("/", []() {
      server.send(200, "text/plain", "this works as well");
    });
    server.on("/setting", []() {
      server.send(200, "text/plain", "setting.");
    });
    server.on("/cleareeprom", []() {
      content = "<!DOCTYPE HTML>\r\n<html>";
      content += "<p>Clearing the EEPROM</p></html>";
      server.send(200, "text/html", content);
      Serial.println("clearing eeprom");
      for (int i = 0; i < 96; ++i) { EEPROM.write(i, 0); }
      EEPROM.commit();
    });
  }
}

void loop() {
  // put your main code here, to run repeatedly:
  server.handleClient();
}











WebServer serverUpdater(80);

String ssid = "esp32main";
String password = "esp32main";
WebServer server(80);

volatile int cc;
bool startupMode = true;
bool transitionMode = false;
bool connectedMode = false;

void setup(void) {
	Serial.begin(115200);

	WiFi.softAP(ssid_start, password_start);
	IPAddress IP = WiFi.softAPIP();
	Serial.print("AP IP address: ");
	Serial.println(IP);

	/*use mdns for host name resolution*/
	mdnsStart();

	/*return index page which is stored in serverIndex */
	serverUpdater.on("/", HTTP_GET, []()
					 {
						serverUpdater.sendHeader("Connection", "close");
						serverUpdater.send(200, "text/html", loginIndex);
					 });
	serverUpdater.on("/uploadForm", HTTP_GET, []()
					 {
						serverUpdater.sendHeader("Connection", "close");
						serverUpdater.send(200, "text/html", uploadForm);
					 });
	serverUpdater.on("/stayPut", HTTP_GET, []()
					 {
						Serial.println("Staying in startup mode for 10 more minutes. Enjoy!");
						TIMEOUT_START = 600 * sec;
						serverUpdater.sendHeader("Location", host);
						//serverUpdater.send(200, "text/html", serverIndex);
					 });
	serverUpdater.on("/setCredentials", HTTP_GET, []()
					 {
						Serial.println("Set Credentials");
						TIMEOUT_START = 600 * sec;
						serverUpdater.sendHeader("Location", "/");
						//serverUpdater.send(200, "text/html", serverIndex);
					 });
	/*handling uploading firmware file */
	serverUpdater.on(
		"/update", HTTP_POST, []()
		{
			serverUpdater.sendHeader("Connection", "close");
			serverUpdater.send(200, "text/plain", (Update.hasError()) ? "FAIL" : "OK");
			ESP.restart();
		},
		[]()
		{
			HTTPUpload &upload = serverUpdater.upload();
			if (upload.status == UPLOAD_FILE_START)
			{
				Serial.printf("Update: %s\n", upload.filename.c_str());
				if (!Update.begin(UPDATE_SIZE_UNKNOWN))
				{ //start with max available size
					Update.printError(Serial);
				}
			}
			else if (upload.status == UPLOAD_FILE_WRITE)
			{
				/* flashing firmware to ESP*/
				if (Update.write(upload.buf, upload.currentSize) != upload.currentSize)
				{
					Update.printError(Serial);
				}
			}
			else if (upload.status == UPLOAD_FILE_END)
			{
				if (Update.end(true))
				{ //true to set the size to the current progress
					Serial.printf("Update Success: %u\nRebooting...\n", upload.totalSize);
				}
				else
				{
					Update.printError(Serial);
				}
			}
		});
	serverUpdater.begin();


		/*return index page which is stored in serverIndex */
	server.on("/", HTTP_GET, []()
					 {
						 server.sendHeader("Connection", "close");
						 server.send(200, "text/html", loginIndex);
					 });
	server.on("/serverIndex", HTTP_GET, []()
					 {
						 server.sendHeader("Connection", "close");
						 server.send(200, "text/html", uploadForm);
					 });
	/*handling uploading firmware file */
	server.on(
		"/update", HTTP_POST, []()
		{
			server.sendHeader("Connection", "close");
			server.send(200, "text/plain", (Update.hasError()) ? "FAIL" : "OK");
			ESP.restart();
		},
		[]()
		{
			HTTPUpload &upload = server.upload();
			if (upload.status == UPLOAD_FILE_START)
			{
				Serial.printf("Update: %s\n", upload.filename.c_str());
				if (!Update.begin(UPDATE_SIZE_UNKNOWN))
				{ //start with max available size
					Update.printError(Serial);
				}
			}
			else if (upload.status == UPLOAD_FILE_WRITE)
			{
				/* flashing firmware to ESP*/
				if (Update.write(upload.buf, upload.currentSize) != upload.currentSize)
				{
					Update.printError(Serial);
				}
			}
			else if (upload.status == UPLOAD_FILE_END)
			{
				if (Update.end(true))
				{ //true to set the size to the current progress
					Serial.printf("Update Success: %u\nRebooting...\n", upload.totalSize);
				}
				else
				{
					Update.printError(Serial);
				}
			}
		});
}

void switchMode() {
	startupMode = false;
	serverUpdater.stop();

	mdnsStop();

	mode();
	server.begin();
	mdnsStart();

}


void mdnsStart() {
	int i = 0;
	if (!MDNS.begin(host)) { //http://esp32.local
		Serial.println("Error setting up MDNS responder!");
		while (!MDNS.begin(host) && i < TIMEOUT_START) {
			i += sec;
			delay(sec);
		}
	}
	Serial.println("mDNS responder started");
}

void mdnsStop() {
	MDNS.end();
}

void mode(void) {
	int i = 0;

	WiFi.begin(ssid_start, password_start);
	while ((WiFi.status() != WL_CONNECTED) && i <= 30) {
		i++;
		delay(sec/100);
		Serial.print(".");
	}
	if (WiFi.status() != WL_CONNECTED) {
		Serial.println("Can't connect to:");
		Serial.println(ssid);
		Serial.println(password);
		delay(30 * sec);
		ESP.restart();
	}
	Serial.println("");
	Serial.print("Started Access Point ");
	Serial.println(ssid);
	Serial.println(WiFi.localIP());
}

void loop(void) {

		cc++;
		if (!(cc % sec)) {
			Serial.println(cc / sec);
		}

		if (startupMode && !(cc % sec) && ! (cc % (sec*TIMEOUT_START))) {
			Serial.println("timeout reached");
			switchMode();
		}

		if (startupMode) {
			serverUpdater.handleClient();
		}
		
		if (connectedMode) {
			server.handleClient();
		}

		delay(1);
}


