
WebServer serverUpdater(80);

String ssid = "esp32main";
String password = "esp32main";
WebServer server(80);

volatile int cc;
bool startupMode = true;
bool transitionMode = false;
bool connectedMode = false;

void setup(void) {
	Serial.begin(115200);

	WiFi.softAP(ssid_start, password_start);
	IPAddress IP = WiFi.softAPIP();
	Serial.print("AP IP address: ");
	Serial.println(IP);

	/*use mdns for host name resolution*/
	mdnsStart();

	/*return index page which is stored in serverIndex */
	serverUpdater.on("/", HTTP_GET, []()
					 {
						serverUpdater.sendHeader("Connection", "close");
						serverUpdater.send(200, "text/html", loginIndex);
					 });
	serverUpdater.on("/uploadForm", HTTP_GET, []()
					 {
						serverUpdater.sendHeader("Connection", "close");
						serverUpdater.send(200, "text/html", uploadForm);
					 });
	serverUpdater.on("/stayPut", HTTP_GET, []()
					 {
						Serial.println("Staying in startup mode for 10 more minutes. Enjoy!");
						TIMEOUT_START = 600 * sec;
						serverUpdater.sendHeader("Location", host);
						//serverUpdater.send(200, "text/html", serverIndex);
					 });
	serverUpdater.on("/setCredentials", HTTP_GET, []()
					 {
						Serial.println("Set Credentials");
						TIMEOUT_START = 600 * sec;
						serverUpdater.sendHeader("Location", "/");
						//serverUpdater.send(200, "text/html", serverIndex);
					 });
	/*handling uploading firmware file */
	serverUpdater.on(
		"/update", HTTP_POST, []()
		{
			serverUpdater.sendHeader("Connection", "close");
			serverUpdater.send(200, "text/plain", (Update.hasError()) ? "FAIL" : "OK");
			ESP.restart();
		},
		[]()
		{
			HTTPUpload &upload = serverUpdater.upload();
			if (upload.status == UPLOAD_FILE_START)
			{
				Serial.printf("Update: %s\n", upload.filename.c_str());
				if (!Update.begin(UPDATE_SIZE_UNKNOWN))
				{ //start with max available size
					Update.printError(Serial);
				}
			}
			else if (upload.status == UPLOAD_FILE_WRITE)
			{
				/* flashing firmware to ESP*/
				if (Update.write(upload.buf, upload.currentSize) != upload.currentSize)
				{
					Update.printError(Serial);
				}
			}
			else if (upload.status == UPLOAD_FILE_END)
			{
				if (Update.end(true))
				{ //true to set the size to the current progress
					Serial.printf("Update Success: %u\nRebooting...\n", upload.totalSize);
				}
				else
				{
					Update.printError(Serial);
				}
			}
		});
	serverUpdater.begin();


		/*return index page which is stored in serverIndex */
	server.on("/", HTTP_GET, []()
					 {
						 server.sendHeader("Connection", "close");
						 server.send(200, "text/html", loginIndex);
					 });
	server.on("/serverIndex", HTTP_GET, []()
					 {
						 server.sendHeader("Connection", "close");
						 server.send(200, "text/html", uploadForm);
					 });
	/*handling uploading firmware file */
	server.on(
		"/update", HTTP_POST, []()
		{
			server.sendHeader("Connection", "close");
			server.send(200, "text/plain", (Update.hasError()) ? "FAIL" : "OK");
			ESP.restart();
		},
		[]()
		{
			HTTPUpload &upload = server.upload();
			if (upload.status == UPLOAD_FILE_START)
			{
				Serial.printf("Update: %s\n", upload.filename.c_str());
				if (!Update.begin(UPDATE_SIZE_UNKNOWN))
				{ //start with max available size
					Update.printError(Serial);
				}
			}
			else if (upload.status == UPLOAD_FILE_WRITE)
			{
				/* flashing firmware to ESP*/
				if (Update.write(upload.buf, upload.currentSize) != upload.currentSize)
				{
					Update.printError(Serial);
				}
			}
			else if (upload.status == UPLOAD_FILE_END)
			{
				if (Update.end(true))
				{ //true to set the size to the current progress
					Serial.printf("Update Success: %u\nRebooting...\n", upload.totalSize);
				}
				else
				{
					Update.printError(Serial);
				}
			}
		});
}

void switchMode() {
	startupMode = false;
	serverUpdater.stop();

	mdnsStop();

	mode();
	server.begin();
	mdnsStart();

}


void mdnsStart() {
	int i = 0;
	if (!MDNS.begin(host)) { //http://esp32.local
		Serial.println("Error setting up MDNS responder!");
		while (!MDNS.begin(host) && i < TIMEOUT_START) {
			i += sec;
			delay(sec);
		}
	}
	Serial.println("mDNS responder started");
}

void mdnsStop() {
	MDNS.end();
}

void mode(void) {
	int i = 0;

	WiFi.begin(ssid_start, password_start);
	while ((WiFi.status() != WL_CONNECTED) && i <= 30) {
		i++;
		delay(sec/100);
		Serial.print(".");
	}
	if (WiFi.status() != WL_CONNECTED) {
		Serial.println("Can't connect to:");
		Serial.println(ssid);
		Serial.println(password);
		delay(30 * sec);
		ESP.restart();
	}
	Serial.println("");
	Serial.print("Started Access Point ");
	Serial.println(ssid);
	Serial.println(WiFi.localIP());
}

void loop(void) {

		cc++;
		if (!(cc % sec)) {
			Serial.println(cc / sec);
		}

		if (startupMode && !(cc % sec) && ! (cc % (sec*TIMEOUT_START))) {
			Serial.println("timeout reached");
			switchMode();
		}

		if (startupMode) {
			serverUpdater.handleClient();
		}
		
		if (connectedMode) {
			server.handleClient();
		}

		delay(1);
}


